{"version":3,"sources":["logo.svg","regForm.js","qrcode.js","Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RegForm","Component","props","mySubmitHandler","event","preventDefault","str","state","studentName","parentName","phoneNo","QRCode","toCanvas","document","getElementById","error","console","log","myChangeHandler","nam","target","name","val","value","setState","studentAge","gender","onSubmit","this","type","onChange","selected","id","className","React","Header","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,kC,mJCmF5BC,G,MC9ESC,Y,kDDCpB,WAAYC,GAAO,IAAD,8BACd,gBAUJC,gBAAkB,SAACC,GACfA,EAAMC,iBACN,IAAIC,EAAG,kBAAc,EAAKC,MAAMC,YAAzB,0BAAsD,EAAKD,MAAME,WAAjE,kCAAqG,EAAKF,MAAMG,SAEvHC,IAAOC,SAASC,SAASC,eAAe,UAAWR,GAAK,SAAUS,GAC3DA,EACCC,QAAQC,IAAIF,GAGZC,QAAQC,IAAI,gBApBN,EAwBhBC,gBAAkB,SAACd,GACjB,IAAIe,EAAMf,EAAMgB,OAAOC,KACnBC,EAAMlB,EAAMgB,OAAOG,MACvB,EAAKC,SAAL,eAAgBL,EAAMG,KAzBtB,EAAKf,MAAO,CACRE,WAAY,GACZC,QAAS,GACTF,YAAa,GACbiB,WAAY,GACZC,OAAQ,IAPE,E,qDA8Bd,OACR,0BAAMC,SAAUC,KAAKzB,iBACV,0DACL,2BACE0B,KAAK,OACLR,KAAK,aACLS,SAAUF,KAAKV,kBAEjB,4CACA,2BACEW,KAAK,SACLR,KAAK,UACLS,SAAUF,KAAKV,kBAGjB,kDACA,2BACEW,KAAK,OACLR,KAAK,cACLS,SAAUF,KAAKV,kBAGjB,iDACA,2BACEW,KAAK,SACLR,KAAK,MACLS,SAAUF,KAAKV,kBAGhB,sCACD,4BAAQG,KAAO,UACb,4BAAQE,MAAQ,KAAKQ,UAAQ,GAA7B,mBACA,4BAAQR,MAAQ,KAAhB,QACA,4BAAQA,MAAQ,KAAhB,UAHF,YAIYK,KAAKV,iBAIjB,6BACA,6BACA,2BAAOW,KAAK,WACZ,4BAAQG,GAAG,SAASC,UAAU,qB,GAxEdC,IAAMjC,YEMbkC,MARf,WACI,OACI,4BAAQF,UAAW,cACf,wDCMGG,MARf,WACI,OACI,6BACI,4BAAQH,UAAU,cAAlB,0DCYGI,MAXf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,MACD,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCFeK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SDwHpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLC,QAAQD,MAAMA,EAAMsC,a","file":"static/js/main.b2a82146.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport QRCode from 'qrcode';\r\nimport './bootstrap.min.css';\r\nimport './qrcode.js';\r\n\r\nclass RegForm extends React.Component {\r\n    constructor(props){\r\n        super()\r\n        this.state ={\r\n            parentName: \"\",\r\n            phoneNo: \"\",\r\n            studentName: \"\",\r\n            studentAge: \"\",\r\n            gender: \"\"\r\n\r\n        }\r\n    }\r\n    mySubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        let str = `This is ${this.state.studentName} with Guardian ${this.state.parentName} whose phone number is ${this.state.phoneNo}`;\r\n\r\n        QRCode.toCanvas(document.getElementById('canvas'), str, function (error) {\r\n            if(error) {\r\n                console.log(error);\r\n            }\r\n            else {\r\n                console.log('success!');\r\n            }\r\n        })\r\n      }\r\n      myChangeHandler = (event) => {\r\n        let nam = event.target.name;\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n      }\r\n    render(){\r\n        return(\r\n<form onSubmit={this.mySubmitHandler}>\r\n           <p>Enter Parent/Guaidian Name:</p>\r\n      <input\r\n        type=\"text\"\r\n        name=\"parentName\"\r\n        onChange={this.myChangeHandler}\r\n      />\r\n      <p>Phone Number:</p>\r\n      <input\r\n        type='number'\r\n        name='phoneNo'\r\n        onChange={this.myChangeHandler}\r\n      />\r\n\r\n      <p>Enter student name:</p>\r\n      <input\r\n        type='text'\r\n        name='studentName'\r\n        onChange={this.myChangeHandler}\r\n      />\r\n\r\n      <p>Enter student age:</p> \r\n      <input\r\n        type='number'\r\n        name='age'\r\n        onChange={this.myChangeHandler}\r\n      />\r\n\r\n       <p>Gender:</p>\r\n      <select name = \"gender\">\r\n        <option value = \"-1\" selected>[Select Gender]</option>\r\n        <option value = \"1\">Male</option>\r\n        <option value = \"2\">Female</option>\r\n        onChange={this.myChangeHandler}\r\n                            \r\n     </select>\r\n      \r\n      <br/>\r\n      <br/>\r\n      <input type='submit' />\r\n      <canvas id='canvas' className='text-center'/>\r\n       </form>\r\n        )\r\n    }\r\n\r\n}\r\nexport default RegForm","import QRCode from 'qrcode';\r\nimport React from 'react';\r\nimport { Component } from 'react';\r\nimport './bootstrap.min.css';\r\n\r\nexport class QR extends Component {\r\n    generateQR() {\r\n        let str = 'My first QR!';\r\n\r\n        QRCode.toCanvas(document.getElementById('canvas'), str, function (error) {\r\n            if(error) {\r\n                console.log(error);\r\n            }\r\n            else {\r\n                console.log('success!');\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas id='canvas' className='text-center'/>\r\n                <button onClick={this.generateQR}>Generate QRCode</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QR;","import React from\"react\"\r\nimport App from \"./App\"\r\nimport './App.css'\r\nfunction Header (){\r\n    return(\r\n        <header className= \"App-header\">\r\n            <h1> Welcome to IstemLabs.</h1>\r\n            </header>\r\n    )\r\n}\r\n\r\nexport default Header ","import React from \"react\"\r\nimport \"./App.css\"\r\n\r\n\r\nfunction Footer (){\r\n    return(\r\n        <div>\r\n            <footer className=\"App-footer\">This is an IstemLabs product all right are reserved.</footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport RegForm from \"./regForm\"\r\nimport Header from \"./Header\"\r\nimport Footer from \"./Footer\";\r\n// import QR from './qrcode';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n     <RegForm />\r\n     {/* <QR /> */}\r\n     <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport './bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}